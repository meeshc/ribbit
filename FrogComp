import java.awt.Color;
import java.awt.geom.AffineTransform;
import java.awt.geom.Rectangle2D;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.event.KeyListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.geom.Ellipse2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.Random;

import javax.swing.JFrame;

public class FrogComp extends GameDriver implements MouseListener, MouseMotionListener{
	AffineTransform transform;
	int highscore, count, score, num2, rotX, rotY;
	Rectangle background, startBackground, endBackground, instructions;
	Pond frog, frog2, tongue, health;
	boolean start, end, instruction, ribbit;
	boolean meh = false;
	boolean eat = false;
	Flies GiantFly;
	BufferedImage imgPond, imgFrog, imgFrogTongue, imgStart, imgInstructions, imgEnd, imgFly1, imgFly2, GiantFly1, GiantFly2;
	BufferedImage[] imgLily;
	ArrayList<Lilypads> lily = new ArrayList<Lilypads>();
	ArrayList<Flies> fly = new ArrayList<Flies>();
	ArrayList<Integer> scores = new ArrayList<Integer>();
	SoundDriver sound;

	public FrogComp() {
		int count = 0;
		int score = 0;
		int rotX = 0;
		int rotY = 0;
		ribbit = true;
		instruction = false;
		start = false;
		end = false;
		String [] temp1 = {"src/Frog_Croak.wav", "src/GameSong.wav"};
		sound = new SoundDriver(temp1);
		sound.loop(1);
		this.addKeyListener(this);
		transform = new AffineTransform();
		endBackground = new Rectangle(0,0,800,600);
		instructions = new Rectangle(0,0,800,600);
		background = new Rectangle(0, 0, 800, 600);
		health = new Pond(50, 40, 200, 40, 0, 0, Color.PINK);
		imgInstructions = this.addImage("src/InstructionScreen.png");
		imgStart = this.addImage("src/StartScreen.png");
		imgEnd = this.addImage("src/EndScreen.png");
		imgPond = this.addImage("src/Pond.png");
		imgFrog = this.addImage("src/Frog.png");
		imgFrogTongue = this.addImage("src/FrogTongue.png");
		imgFly1 = this.addImage("src/Fly1.png");
		imgFly2 = this.addImage("src/Fly2.png");
		imgLily = new BufferedImage[1];
		imgLily[0] = this.addImage("src/Lilypad.png");
		GiantFly1 = this.addImage("src/GiantFly1.png");
		GiantFly2 = this.addImage("src/GiantFly2.png");
		fillPond();
		this.addMouseListener(this);
		this.addMouseMotionListener(this);
	}
	
	public void mouseClicked(MouseEvent e) {
	}

	public void mousePressed(MouseEvent e) {
	}

	public void mouseEntered(MouseEvent e) {
	}

	public void mouseExited(MouseEvent e) {
	}

	public void mouseReleased(MouseEvent e) {
		int num = -1;
		for (int i = 0; i < lily.size(); i++) {
			Lilypads here = lily.get(i);
			Ellipse2D.Double box = new Ellipse2D.Double(here.getX(),
					here.getY(), here.getWidth(), here.getHeight());
			if(box.contains(e.getPoint())){
				num = i;
			}
		}
		if(num > -1){
			meh = true;
			sound.play(0);
			num2 = num;
			health.setWidth(health.getWidth()-5);
		}
	}
	
	public void keyPressed(KeyEvent e){
		if(e.getKeyCode() == KeyEvent.VK_SPACE){
			eat = true;
			health.setWidth(health.getWidth() - 3);
		}
		if(e.getKeyCode() == KeyEvent.VK_P){
			instruction = true;
			ribbit = false;
		}
		if (e.getKeyCode() == KeyEvent.VK_ENTER) {
			end = false;
			start = true;
			instruction = false;
		}
		if (e.getKeyCode() == KeyEvent.VK_R) {
			end = false;
			ribbit = true;
			score = 0;
			count = 0;
		}
		
	}
	public void keyReleased(KeyEvent e) {
		if(e.getKeyCode() == KeyEvent.VK_SPACE)
			eat = false;
	}
	

	public void fillPond() {
		for (int i = 0; i < 17; i++) {
			Lilypads temp = new Lilypads();
			boolean test = true;
			for (int j = 0; j < lily.size(); j++) {
				if (temp.intersects(lily.get(j))) {
					test = false;
				}
			}
			Random dog = new Random();
			int num = dog.nextInt(2);
			if (num == 1)
				temp.setDx(-1 * temp.getDx());
			int num2 = dog.nextInt(2);
			if (num2 == 1)
				temp.setDy(-1 * temp.getDy());
			if (test) {
				lily.add(temp);
			}
		}
		for(int i = 0; i < 20; i++){
			fly.add(new Flies());
		}
		if (count % 5 == 0 && fly.size() < 30) {
			fly.add(new Flies());
		}
	}

	@Override
	public void draw(Graphics2D win) {
		
		if(end){
			scores.add(score);
			if(score > highscore)
				highscore = score;
			win.drawImage(imgEnd, null, 0, 0);
			Font scoreFont = new Font(Font.SANS_SERIF, Font.BOLD, 30);
			win.setColor(Color.BLACK);
			win.setFont(scoreFont);
			win.drawString("Score: " + score, 320, 435);
			win.drawString("High Score: " + highscore, 290, 470);
		}
		if(health.getWidth()<0){
			start = false;
			end = true;
		}
		if(start){
			if(count%2==0)
				score++;
			win.fill(background);
			win.drawImage(imgPond, null, 0, 0);
			this.boundaries(win);
	
			if (count % 3 == 0) {	
				this.bounce();
				this.boundaries(win);
			}
			count++;
			if(meh&&!eat) {
				DrawFrog(win, imgFrog);
			}
			if (eat) {
				this.Flick(win);
				
			}
			
			this.fillFlies(win);
			if(health.width > 0){
				if(count%6==0)
					health.setWidth(health.width - 1);
				win.setColor(new Color (252, 219, 212, 200));
				win.fill(health);
			}
			
			Font scoreFont = new Font(Font.MONOSPACED, Font.BOLD, 20);
			win.setColor(Color.BLACK);
			win.setFont(scoreFont);
			win.drawString("Health", 100, 25);
			win.drawString("Score: " + score, 600, 25);
		}
		if(score % 50 == 0 && fly.size() > 15){
			fly.remove(0);
		}
		if(ribbit){
			health.setWidth(200);
			win.fill(background);
			win.drawImage(imgStart, null, 0, 0);
		}
		if(instruction){
			win.fill(background);
			win.drawImage(imgInstructions, null, 0, 0);
		}
		
		
	}
	
	
	public void fillFlies(Graphics2D win){
		for(int i=0; i < fly.size(); i++){
			fly.get(i).translate((int)fly.get(i).getDx(), (int)fly.get(i).getDy());
			if (fly.get(i).getX() < 0) {
				fly.get(i).setDx(-1 * fly.get(i).getDx());
			}
			if (fly.get(i).getX() > 780) {
				fly.get(i).setDx(-1 * Math.abs(fly.get(i).getDx()));
			}
			if (fly.get(i).getY() > 560) {
				fly.get(i).setDy(-1 * Math.abs(fly.get(i).getDy()));
			}
			if (fly.get(i).getY() < 0) {
				fly.get(i).setDy(-1 * fly.get(i).getDy());
			}
			this.DrawFly(win, fly.get(i));
		}
		if (count%500 ==0) {
			GiantFly = new Flies();
		}
		if (GiantFly != null) {
			if (count % 2 == 0)
				win.drawImage(GiantFly1, null, (int)GiantFly.getX(), (int)GiantFly.getY());
			else
				win.drawImage(GiantFly2, null, (int)GiantFly.getX(), (int)GiantFly.getY());
			GiantFly.translate((int)GiantFly.getDx(), (int)GiantFly.getDy());
			if (GiantFly.getX() < 0) {
				GiantFly.setDx(-1 * GiantFly.getDx());
			}
			if (GiantFly.getX() > 780) {
				GiantFly.setDx(-1 * Math.abs(GiantFly.getDx()));
			}
			if (GiantFly.getY() > 560) {
				GiantFly.setDy(-1 * Math.abs(GiantFly.getDy()));
			}
			if (GiantFly.getY() < 0) {
				GiantFly.setDy(-1 * GiantFly.getDy());
			}
		}

			
		
	}
	
	public void boundaries(Graphics2D win) {
		for (int i = 0; i < lily.size(); i++) {
			DrawLily(win, lily.get(i));
			if (count % 3 == 0)
				lily.get(i).translate((int) lily.get(i).getDx(),
						(int) lily.get(i).getDy());
			if (lily.get(i).getX() < 0) {
				lily.get(i).setDx(-1 * lily.get(i).getDx());
			}
			if (lily.get(i).getX() > 725) {
				lily.get(i).setDx(-1 * Math.abs(lily.get(i).getDx()));
			}
			if (lily.get(i).getY() > 500) {
				lily.get(i).setDy(-1 * Math.abs(lily.get(i).getDy()));
			}
			if (lily.get(i).getY() < 0) {
				lily.get(i).setDy(-1 * lily.get(i).getDy());
			}
		}
	}
	public void DrawLily(Graphics2D win, Pond object) {
		if (imgLily == null) {
			win.setColor(object.getColor());
			win.fill(object);
		} else {
			win.drawImage(imgLily[0], null, (int) object.getX(),
					(int) object.getY());
		}

	}
	
	public void DrawFly(Graphics2D win, Pond object){
		if (count % 2 == 0)
			win.drawImage(imgFly1, null, (int)object.getX(), (int)object.getY());
		else
			win.drawImage(imgFly2, null, (int)object.getX(), (int)object.getY());
	}

	public void DrawFrog(Graphics2D win, BufferedImage img) {
		AffineTransform tx = AffineTransform.getRotateInstance(
				Math.atan2(rotY, rotX) + Math.PI/2, img.getWidth()/2, img.getHeight()/2);
		AffineTransformOp op = new AffineTransformOp(tx,
				AffineTransformOp.TYPE_BILINEAR);
		if(!eat){
			win.drawImage(op.filter(img, null), lily.get(num2).getCenter().x
					- 5* imgFrog.getWidth() / 12,
					lily.get(num2).getCenter().y - 5*imgFrog.getHeight() / 12, null);
		} else {
			win.drawImage(op.filter(img, null), lily.get(num2).getCenter().x
					- 7* imgFrogTongue.getWidth() / 16,
					lily.get(num2).getCenter().y - 8 * imgFrogTongue.getHeight() / 17, null);

		}
	}
	
	public void bounce() {
		for (int i = 0; i < lily.size(); i++) {
			for (int j = i + 1; j < lily.size(); j++) {
				if (lily.get(i).intersects(lily.get(j))) {

					if ((lily.get(i).getDy() < 0 && lily.get(j).getDy() > 0)
							|| (lily.get(j).getDy() < 0 && lily.get(i).getDy() > 0)) {
						double temp3 = lily.get(i).getDy();
						double temp4 = lily.get(j).getDy();
						lily.get(i).setDy(temp3 * -1);
						lily.get(j).setDy(temp4 * -1);
					}
					if ((lily.get(i).getDx() < 0 && lily.get(j).getDx() > 0)
							|| (lily.get(j).getDx() < 0 && lily.get(i).getDx() > 0)) {
						double temp1 = lily.get(i).getDx();
						double temp2 = lily.get(j).getDx();
						lily.get(i).setDx(temp1 * -1);
						lily.get(j).setDx(temp2 * -1);
					}
				}
			}
		}
	}
	

	public void Flick(Graphics2D win){
		//tongue = new Pond((int)(lily.get(num2).getX()), (int)(lily.get(num2).getY()), 50,50,0,0,Color.PINK);
		//tongue = new Pond((int)frog.getX(), (int)frog.getY(), 20, 20, 0, 0, Color.PINK);
		double angle = Math.atan2(rotY, rotX) + Math.PI/2;
		//double angle = Math.toRadians(Math.atan2(targetY - tongue.getY(), targetX - tongue.getX()));
	    //win.drawImage(imgTongue, null, (int)(lily.get(num2).getCenterX()), (int)(lily.get(num2).getY()-10));
	    
		DrawFrog(win, imgFrogTongue);
		for(int i = 0; i < fly.size(); i++) {
			double DistX = fly.get(i).getCenterX() - lily.get(num2).getCenterX();
			double DistY = fly.get(i).getCenterY() - lily.get(num2).getCenterY();
			double flyAngle = Math.atan2(DistY,DistX) + Math.PI/2;
			if(Math.sqrt(Math.pow(DistX,2)+ Math.pow(DistY,2)) < 80 && Math.abs(flyAngle - angle) < Math.PI/8){
				fly.remove(i);
				i--;
				fly.add(new Flies());
				health.setWidth(health.getWidth()+15);
			}
		}
		if(GiantFly != null){
			double DistX1 = GiantFly.getCenterX() - lily.get(num2).getCenterX();
			double DistY1 = GiantFly.getCenterY() - lily.get(num2).getCenterY();
			double flyAngle1 = Math.atan2(DistY1, DistX1) + Math.PI/2;
			if(Math.sqrt(Math.pow(DistX1,2)+ Math.pow(DistY1,2)) < 80 && Math.abs(flyAngle1 - angle) < Math.PI/8){
				GiantFly = null;
				int powerup = 2;
				//int powerup = (int) (Math.random() * 5);
				if (powerup == 0) {
					health.setWidth(health.getWidth() + 30);
				}
				if (powerup == 1) {
					health.setWidth(health.getWidth() - 10);
				}
				if (powerup == 2) {
					for (int i = fly.size() - 1; i > 1; i--){
						fly.remove(i);
					}
				}
			}	
		}
		
	}

public static void main(String[] args) {
		// TODO Auto-generated method stub

		JFrame frame = new JFrame();
		frame.setSize(800, 600);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setTitle("Ribbit");
		frame.add(new FrogComp());
		frame.setVisible(true);

	}

	@Override
	public void mouseDragged(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseMoved(MouseEvent e) {
		// TODO Auto-generated method stub
		rotX = ((int)(e.getX() - lily.get(num2).getX()));
		rotY = ((int)(e.getY() - lily.get(num2).getY()));
	}

}
